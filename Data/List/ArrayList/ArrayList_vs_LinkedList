ArrayList Vs LinkedList

1) Search: ArrayList search operation is pretty fast compared to the LinkedList search operation. 
get(int index) in ArrayList gives the performance of O(1) while LinkedList performance is O(n).

Reason: ArrayList maintains index based system for its elements as it uses array data structure 
implicitly which makes it faster for searching an element in the list. On the other side LinkedList 
implements doubly linked list which requires the traversal through all the elements for searching an element.


2) Deletion: LinkedList remove operation gives O(1) performance while ArrayList gives 
variable performance: O(n) in worst case (while removing first element) and O(1) in best case 
(While removing last element).

Conclusion: LinkedList element deletion is faster compared to ArrayList.

Reason: LinkedList’s each element maintains two pointers (addresses) which points to the both neighbor 
elements in the list. Hence removal only requires change in the pointer location in the two neighbor 
nodes (elements) of the node which is going to be removed. While In ArrayList all the elements 
need to be shifted to fill out the space created by removed element.

3) Inserts Performance: LinkedList add method gives O(1) performance while 
ArrayList gives O(n) in worst case. Reason is same as explained for remove.


When to use LinkedList and when to use ArrayList?
1) As explained above the insert and remove operations give good performance (O(1)) 
in LinkedList compared to ArrayList(O(n)). Hence if there is a requirement of frequent 
addition and deletion in application then LinkedList is a best choice.

2) Search (get method) operations are fast in Arraylist (O(1)) but not in LinkedList (O(n)) 
so If there are less add and remove operations and more search operations requirement, 
ArrayList would be your best bet.


